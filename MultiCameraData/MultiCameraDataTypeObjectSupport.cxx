// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MultiCameraDataTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "MultiCameraDataTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "MultiCameraData.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ImageData_type_identifier(
        TypeIdentifierPair& type_ids_ImageData)
{

    ReturnCode_t return_code_ImageData {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ImageData =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ImageData", type_ids_ImageData);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ImageData)
    {
        StructTypeFlag struct_flags_ImageData = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ImageData = "ImageData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ImageData;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ImageData;
        AppliedAnnotationSeq tmp_ann_custom_ImageData;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_ImageData;
        if (!tmp_ann_custom_ImageData.empty())
        {
            ann_custom_ImageData = tmp_ann_custom_ImageData;
        }

        CompleteTypeDetail detail_ImageData = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ImageData, ann_custom_ImageData, type_name_ImageData.to_string());
        CompleteStructHeader header_ImageData;
        header_ImageData = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ImageData);
        CompleteStructMemberSeq member_seq_ImageData;
        {
            TypeIdentifierPair type_ids_width;
            ReturnCode_t return_code_width {eprosima::fastdds::dds::RETCODE_OK};
            return_code_width =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_width);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_width)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "width Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_width = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_width = 0x00000000;
            bool common_width_ec {false};
            CommonStructMember common_width {TypeObjectUtils::build_common_struct_member(member_id_width, member_flags_width, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_width, common_width_ec))};
            if (!common_width_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure width member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_width = "width";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_width;
            ann_custom_ImageData.reset();
            CompleteMemberDetail detail_width = TypeObjectUtils::build_complete_member_detail(name_width, member_ann_builtin_width, ann_custom_ImageData);
            CompleteStructMember member_width = TypeObjectUtils::build_complete_struct_member(common_width, detail_width);
            TypeObjectUtils::add_complete_struct_member(member_seq_ImageData, member_width);
        }
        {
            TypeIdentifierPair type_ids_height;
            ReturnCode_t return_code_height {eprosima::fastdds::dds::RETCODE_OK};
            return_code_height =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_height);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_height)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "height Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_height = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_height = 0x00000001;
            bool common_height_ec {false};
            CommonStructMember common_height {TypeObjectUtils::build_common_struct_member(member_id_height, member_flags_height, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_height, common_height_ec))};
            if (!common_height_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure height member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_height = "height";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_height;
            ann_custom_ImageData.reset();
            CompleteMemberDetail detail_height = TypeObjectUtils::build_complete_member_detail(name_height, member_ann_builtin_height, ann_custom_ImageData);
            CompleteStructMember member_height = TypeObjectUtils::build_complete_struct_member(common_height, detail_height);
            TypeObjectUtils::add_complete_struct_member(member_seq_ImageData, member_height);
        }
        {
            TypeIdentifierPair type_ids_camera110;
            ReturnCode_t return_code_camera110 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_camera110 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_byte_unbounded", type_ids_camera110);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_camera110)
            {
                return_code_camera110 =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_camera110);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_camera110)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_camera110, element_identifier_anonymous_sequence_byte_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_byte_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_camera110.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_byte_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_byte_unbounded, element_flags_anonymous_sequence_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_byte_unbounded", type_ids_camera110))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_camera110 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_camera110 = 0x00000002;
            bool common_camera110_ec {false};
            CommonStructMember common_camera110 {TypeObjectUtils::build_common_struct_member(member_id_camera110, member_flags_camera110, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_camera110, common_camera110_ec))};
            if (!common_camera110_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure camera110 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_camera110 = "camera110";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_camera110;
            ann_custom_ImageData.reset();
            CompleteMemberDetail detail_camera110 = TypeObjectUtils::build_complete_member_detail(name_camera110, member_ann_builtin_camera110, ann_custom_ImageData);
            CompleteStructMember member_camera110 = TypeObjectUtils::build_complete_struct_member(common_camera110, detail_camera110);
            TypeObjectUtils::add_complete_struct_member(member_seq_ImageData, member_camera110);
        }
        {
            TypeIdentifierPair type_ids_camera100;
            ReturnCode_t return_code_camera100 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_camera100 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_byte_unbounded", type_ids_camera100);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_camera100)
            {
                return_code_camera100 =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_camera100);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_camera100)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_camera100, element_identifier_anonymous_sequence_byte_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_byte_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_camera100.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_byte_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_byte_unbounded, element_flags_anonymous_sequence_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_byte_unbounded", type_ids_camera100))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_camera100 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_camera100 = 0x00000003;
            bool common_camera100_ec {false};
            CommonStructMember common_camera100 {TypeObjectUtils::build_common_struct_member(member_id_camera100, member_flags_camera100, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_camera100, common_camera100_ec))};
            if (!common_camera100_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure camera100 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_camera100 = "camera100";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_camera100;
            ann_custom_ImageData.reset();
            CompleteMemberDetail detail_camera100 = TypeObjectUtils::build_complete_member_detail(name_camera100, member_ann_builtin_camera100, ann_custom_ImageData);
            CompleteStructMember member_camera100 = TypeObjectUtils::build_complete_struct_member(common_camera100, detail_camera100);
            TypeObjectUtils::add_complete_struct_member(member_seq_ImageData, member_camera100);
        }
        CompleteStructType struct_type_ImageData = TypeObjectUtils::build_complete_struct_type(struct_flags_ImageData, header_ImageData, member_seq_ImageData);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ImageData, type_name_ImageData.to_string(), type_ids_ImageData))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ImageData already registered in TypeObjectRegistry for a different type.");
        }
    }
}

